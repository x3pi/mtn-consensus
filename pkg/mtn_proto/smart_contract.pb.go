// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.20.3
// source: smart_contract.proto

package mtn_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SmartContractUpdateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      []byte            `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Storage   map[string][]byte `protobuf:"bytes,2,rep,name=Storage,proto3" json:"Storage,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EventLogs []*EventLog       `protobuf:"bytes,3,rep,name=EventLogs,proto3" json:"EventLogs,omitempty"`
}

func (x *SmartContractUpdateData) Reset() {
	*x = SmartContractUpdateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_contract_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartContractUpdateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartContractUpdateData) ProtoMessage() {}

func (x *SmartContractUpdateData) ProtoReflect() protoreflect.Message {
	mi := &file_smart_contract_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartContractUpdateData.ProtoReflect.Descriptor instead.
func (*SmartContractUpdateData) Descriptor() ([]byte, []int) {
	return file_smart_contract_proto_rawDescGZIP(), []int{0}
}

func (x *SmartContractUpdateData) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *SmartContractUpdateData) GetStorage() map[string][]byte {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *SmartContractUpdateData) GetEventLogs() []*EventLog {
	if x != nil {
		return x.EventLogs
	}
	return nil
}

type SmartContractUpdateDatas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumber uint64                              `protobuf:"varint,1,opt,name=BlockNumber,proto3" json:"BlockNumber,omitempty"`
	Data        map[string]*SmartContractUpdateData `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SmartContractUpdateDatas) Reset() {
	*x = SmartContractUpdateDatas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_contract_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartContractUpdateDatas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartContractUpdateDatas) ProtoMessage() {}

func (x *SmartContractUpdateDatas) ProtoReflect() protoreflect.Message {
	mi := &file_smart_contract_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartContractUpdateDatas.ProtoReflect.Descriptor instead.
func (*SmartContractUpdateDatas) Descriptor() ([]byte, []int) {
	return file_smart_contract_proto_rawDescGZIP(), []int{1}
}

func (x *SmartContractUpdateDatas) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *SmartContractUpdateDatas) GetData() map[string]*SmartContractUpdateData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetSmartContractStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     []byte `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	BlockNumber uint64 `protobuf:"varint,2,opt,name=BlockNumber,proto3" json:"BlockNumber,omitempty"`
	Key         []byte `protobuf:"bytes,3,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *GetSmartContractStorage) Reset() {
	*x = GetSmartContractStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_contract_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSmartContractStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmartContractStorage) ProtoMessage() {}

func (x *GetSmartContractStorage) ProtoReflect() protoreflect.Message {
	mi := &file_smart_contract_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmartContractStorage.ProtoReflect.Descriptor instead.
func (*GetSmartContractStorage) Descriptor() ([]byte, []int) {
	return file_smart_contract_proto_rawDescGZIP(), []int{2}
}

func (x *GetSmartContractStorage) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *GetSmartContractStorage) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *GetSmartContractStorage) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type GetSmartContractStorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     []byte `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	BlockNumber uint64 `protobuf:"varint,2,opt,name=BlockNumber,proto3" json:"BlockNumber,omitempty"`
	Key         []byte `protobuf:"bytes,3,opt,name=Key,proto3" json:"Key,omitempty"`
	Value       []byte `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *GetSmartContractStorageResponse) Reset() {
	*x = GetSmartContractStorageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_contract_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSmartContractStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmartContractStorageResponse) ProtoMessage() {}

func (x *GetSmartContractStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smart_contract_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmartContractStorageResponse.ProtoReflect.Descriptor instead.
func (*GetSmartContractStorageResponse) Descriptor() ([]byte, []int) {
	return file_smart_contract_proto_rawDescGZIP(), []int{3}
}

func (x *GetSmartContractStorageResponse) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *GetSmartContractStorageResponse) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *GetSmartContractStorageResponse) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *GetSmartContractStorageResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type GetSmartContractCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     []byte `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	BlockNumber uint64 `protobuf:"varint,2,opt,name=BlockNumber,proto3" json:"BlockNumber,omitempty"`
}

func (x *GetSmartContractCode) Reset() {
	*x = GetSmartContractCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_contract_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSmartContractCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmartContractCode) ProtoMessage() {}

func (x *GetSmartContractCode) ProtoReflect() protoreflect.Message {
	mi := &file_smart_contract_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmartContractCode.ProtoReflect.Descriptor instead.
func (*GetSmartContractCode) Descriptor() ([]byte, []int) {
	return file_smart_contract_proto_rawDescGZIP(), []int{4}
}

func (x *GetSmartContractCode) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *GetSmartContractCode) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

type GetSmartContractCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     []byte `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	BlockNumber uint64 `protobuf:"varint,2,opt,name=BlockNumber,proto3" json:"BlockNumber,omitempty"`
	Code        []byte `protobuf:"bytes,3,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (x *GetSmartContractCodeResponse) Reset() {
	*x = GetSmartContractCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_contract_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSmartContractCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmartContractCodeResponse) ProtoMessage() {}

func (x *GetSmartContractCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_smart_contract_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmartContractCodeResponse.ProtoReflect.Descriptor instead.
func (*GetSmartContractCodeResponse) Descriptor() ([]byte, []int) {
	return file_smart_contract_proto_rawDescGZIP(), []int{5}
}

func (x *GetSmartContractCodeResponse) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *GetSmartContractCodeResponse) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *GetSmartContractCodeResponse) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

type TouchedAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses [][]byte `protobuf:"bytes,1,rep,name=Addresses,proto3" json:"Addresses,omitempty"`
}

func (x *TouchedAddresses) Reset() {
	*x = TouchedAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_contract_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TouchedAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TouchedAddresses) ProtoMessage() {}

func (x *TouchedAddresses) ProtoReflect() protoreflect.Message {
	mi := &file_smart_contract_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TouchedAddresses.ProtoReflect.Descriptor instead.
func (*TouchedAddresses) Descriptor() ([]byte, []int) {
	return file_smart_contract_proto_rawDescGZIP(), []int{6}
}

func (x *TouchedAddresses) GetAddresses() [][]byte {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type ExecuteSCResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionHash []byte            `protobuf:"bytes,1,opt,name=TransactionHash,proto3" json:"TransactionHash,omitempty"`
	MapAddBalance   map[string][]byte `protobuf:"bytes,2,rep,name=MapAddBalance,proto3" json:"MapAddBalance,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`   // addresses with add balance
	MapSubBalance   map[string][]byte `protobuf:"bytes,3,rep,name=MapSubBalance,proto3" json:"MapSubBalance,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`   // addresses with sub balance
	MapCodeHash     map[string][]byte `protobuf:"bytes,4,rep,name=MapCodeHash,proto3" json:"MapCodeHash,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`       // address were deployed by this transaction
	MapStorageRoot  map[string][]byte `protobuf:"bytes,5,rep,name=MapStorageRoot,proto3" json:"MapStorageRoot,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // address were deployed by this transaction
	LogsHash        []byte            `protobuf:"bytes,6,opt,name=LogsHash,proto3" json:"LogsHash,omitempty"`
	Status          RECEIPT_STATUS    `protobuf:"varint,8,opt,name=Status,proto3,enum=receipt.RECEIPT_STATUS" json:"Status,omitempty"`  // returns (function had call return) or halted (function run complete with no return ) or threw (err)
	Exception       EXCEPTION         `protobuf:"varint,9,opt,name=Exception,proto3,enum=receipt.EXCEPTION" json:"Exception,omitempty"` // Exception has been threw
	Return          []byte            `protobuf:"bytes,10,opt,name=Return,proto3" json:"Return,omitempty"`                              // result after call
	GasUsed         uint64            `protobuf:"varint,11,opt,name=GasUsed,proto3" json:"GasUsed,omitempty"`
	//
	MapStorageAddressTouchedAddresses map[string]*TouchedAddresses `protobuf:"bytes,12,rep,name=MapStorageAddressTouchedAddresses,proto3" json:"MapStorageAddressTouchedAddresses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // storage address => touched address
	//
	MapStorageAddress                   map[string][]byte        `protobuf:"bytes,13,rep,name=MapStorageAddress,proto3" json:"MapStorageAddress,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // storage address => touched address
	MapCreatorPubkey                    map[string][]byte        `protobuf:"bytes,14,rep,name=MapCreatorPubkey,proto3" json:"MapCreatorPubkey,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`   // storage address => touched address
	MapNativeSmartContractUpdateStorage map[string]*StorageDatas `protobuf:"bytes,15,rep,name=MapNativeSmartContractUpdateStorage,proto3" json:"MapNativeSmartContractUpdateStorage,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EventLogs                           []*EventLog              `protobuf:"bytes,16,rep,name=EventLogs,proto3" json:"EventLogs,omitempty"`
}

func (x *ExecuteSCResult) Reset() {
	*x = ExecuteSCResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_contract_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteSCResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSCResult) ProtoMessage() {}

func (x *ExecuteSCResult) ProtoReflect() protoreflect.Message {
	mi := &file_smart_contract_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSCResult.ProtoReflect.Descriptor instead.
func (*ExecuteSCResult) Descriptor() ([]byte, []int) {
	return file_smart_contract_proto_rawDescGZIP(), []int{7}
}

func (x *ExecuteSCResult) GetTransactionHash() []byte {
	if x != nil {
		return x.TransactionHash
	}
	return nil
}

func (x *ExecuteSCResult) GetMapAddBalance() map[string][]byte {
	if x != nil {
		return x.MapAddBalance
	}
	return nil
}

func (x *ExecuteSCResult) GetMapSubBalance() map[string][]byte {
	if x != nil {
		return x.MapSubBalance
	}
	return nil
}

func (x *ExecuteSCResult) GetMapCodeHash() map[string][]byte {
	if x != nil {
		return x.MapCodeHash
	}
	return nil
}

func (x *ExecuteSCResult) GetMapStorageRoot() map[string][]byte {
	if x != nil {
		return x.MapStorageRoot
	}
	return nil
}

func (x *ExecuteSCResult) GetLogsHash() []byte {
	if x != nil {
		return x.LogsHash
	}
	return nil
}

func (x *ExecuteSCResult) GetStatus() RECEIPT_STATUS {
	if x != nil {
		return x.Status
	}
	return RECEIPT_STATUS_RETURNED
}

func (x *ExecuteSCResult) GetException() EXCEPTION {
	if x != nil {
		return x.Exception
	}
	return EXCEPTION_ERR_OUT_OF_GAS
}

func (x *ExecuteSCResult) GetReturn() []byte {
	if x != nil {
		return x.Return
	}
	return nil
}

func (x *ExecuteSCResult) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *ExecuteSCResult) GetMapStorageAddressTouchedAddresses() map[string]*TouchedAddresses {
	if x != nil {
		return x.MapStorageAddressTouchedAddresses
	}
	return nil
}

func (x *ExecuteSCResult) GetMapStorageAddress() map[string][]byte {
	if x != nil {
		return x.MapStorageAddress
	}
	return nil
}

func (x *ExecuteSCResult) GetMapCreatorPubkey() map[string][]byte {
	if x != nil {
		return x.MapCreatorPubkey
	}
	return nil
}

func (x *ExecuteSCResult) GetMapNativeSmartContractUpdateStorage() map[string]*StorageDatas {
	if x != nil {
		return x.MapNativeSmartContractUpdateStorage
	}
	return nil
}

func (x *ExecuteSCResult) GetEventLogs() []*EventLog {
	if x != nil {
		return x.EventLogs
	}
	return nil
}

type ExecuteSCResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results     []*ExecuteSCResult `protobuf:"bytes,1,rep,name=Results,proto3" json:"Results,omitempty"`
	GroupId     uint64             `protobuf:"varint,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	BlockNumber uint64             `protobuf:"varint,3,opt,name=BlockNumber,proto3" json:"BlockNumber,omitempty"`
}

func (x *ExecuteSCResults) Reset() {
	*x = ExecuteSCResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_contract_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteSCResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSCResults) ProtoMessage() {}

func (x *ExecuteSCResults) ProtoReflect() protoreflect.Message {
	mi := &file_smart_contract_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSCResults.ProtoReflect.Descriptor instead.
func (*ExecuteSCResults) Descriptor() ([]byte, []int) {
	return file_smart_contract_proto_rawDescGZIP(), []int{8}
}

func (x *ExecuteSCResults) GetResults() []*ExecuteSCResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ExecuteSCResults) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ExecuteSCResults) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

type TouchedAddressesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumber uint64   `protobuf:"varint,1,opt,name=BlockNumber,proto3" json:"BlockNumber,omitempty"`
	Addresses   [][]byte `protobuf:"bytes,2,rep,name=Addresses,proto3" json:"Addresses,omitempty"`
}

func (x *TouchedAddressesData) Reset() {
	*x = TouchedAddressesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_contract_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TouchedAddressesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TouchedAddressesData) ProtoMessage() {}

func (x *TouchedAddressesData) ProtoReflect() protoreflect.Message {
	mi := &file_smart_contract_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TouchedAddressesData.ProtoReflect.Descriptor instead.
func (*TouchedAddressesData) Descriptor() ([]byte, []int) {
	return file_smart_contract_proto_rawDescGZIP(), []int{9}
}

func (x *TouchedAddressesData) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *TouchedAddressesData) GetAddresses() [][]byte {
	if x != nil {
		return x.Addresses
	}
	return nil
}

var File_smart_contract_proto protoreflect.FileDescriptor

var file_smart_contract_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xec, 0x01, 0x0a, 0x17, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x09, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xe6, 0x01, 0x0a, 0x18, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x46, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x60, 0x0a, 0x09, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x67, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x4b, 0x65, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x52, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x6e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x30, 0x0a, 0x10, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x22, 0x80, 0x0e, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x43,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x58, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x41, 0x64, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x53, 0x43, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x41, 0x64, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x4d, 0x61, 0x70,
	0x41, 0x64, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x4d, 0x61,
	0x70, 0x53, 0x75, 0x62, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x43, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x75, 0x62, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x4d, 0x61, 0x70, 0x53, 0x75, 0x62, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x53, 0x43, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x4d, 0x61, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x5b, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x43, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x4c, 0x6f, 0x67, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x2f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x2e, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x50, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x2e,
	0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x09, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x47,
	0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x94, 0x01, 0x0a, 0x21, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x46, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x43, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x21, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x64, 0x0a,
	0x11, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x53, 0x43, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x11, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x61, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x43, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4d,
	0x61, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x4d, 0x61, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x9a, 0x01, 0x0a, 0x23, 0x4d, 0x61, 0x70, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x43, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x23,
	0x4d, 0x61, 0x70, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x09, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x41, 0x64, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x53,
	0x75, 0x62, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x61,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x76, 0x0a,
	0x26, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d,
	0x61, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x73, 0x0a, 0x28, 0x4d, 0x61, 0x70, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6d, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x53, 0x43, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x53, 0x43, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x56, 0x0a, 0x14, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x0c, 0x5a, 0x0a, 0x2f, 0x6d, 0x74,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_smart_contract_proto_rawDescOnce sync.Once
	file_smart_contract_proto_rawDescData = file_smart_contract_proto_rawDesc
)

func file_smart_contract_proto_rawDescGZIP() []byte {
	file_smart_contract_proto_rawDescOnce.Do(func() {
		file_smart_contract_proto_rawDescData = protoimpl.X.CompressGZIP(file_smart_contract_proto_rawDescData)
	})
	return file_smart_contract_proto_rawDescData
}

var file_smart_contract_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_smart_contract_proto_goTypes = []interface{}{
	(*SmartContractUpdateData)(nil),         // 0: smart_contract.SmartContractUpdateData
	(*SmartContractUpdateDatas)(nil),        // 1: smart_contract.SmartContractUpdateDatas
	(*GetSmartContractStorage)(nil),         // 2: smart_contract.GetSmartContractStorage
	(*GetSmartContractStorageResponse)(nil), // 3: smart_contract.GetSmartContractStorageResponse
	(*GetSmartContractCode)(nil),            // 4: smart_contract.GetSmartContractCode
	(*GetSmartContractCodeResponse)(nil),    // 5: smart_contract.GetSmartContractCodeResponse
	(*TouchedAddresses)(nil),                // 6: smart_contract.TouchedAddresses
	(*ExecuteSCResult)(nil),                 // 7: smart_contract.ExecuteSCResult
	(*ExecuteSCResults)(nil),                // 8: smart_contract.ExecuteSCResults
	(*TouchedAddressesData)(nil),            // 9: smart_contract.TouchedAddressesData
	nil,                                     // 10: smart_contract.SmartContractUpdateData.StorageEntry
	nil,                                     // 11: smart_contract.SmartContractUpdateDatas.DataEntry
	nil,                                     // 12: smart_contract.ExecuteSCResult.MapAddBalanceEntry
	nil,                                     // 13: smart_contract.ExecuteSCResult.MapSubBalanceEntry
	nil,                                     // 14: smart_contract.ExecuteSCResult.MapCodeHashEntry
	nil,                                     // 15: smart_contract.ExecuteSCResult.MapStorageRootEntry
	nil,                                     // 16: smart_contract.ExecuteSCResult.MapStorageAddressTouchedAddressesEntry
	nil,                                     // 17: smart_contract.ExecuteSCResult.MapStorageAddressEntry
	nil,                                     // 18: smart_contract.ExecuteSCResult.MapCreatorPubkeyEntry
	nil,                                     // 19: smart_contract.ExecuteSCResult.MapNativeSmartContractUpdateStorageEntry
	(*EventLog)(nil),                        // 20: event_log.EventLog
	(RECEIPT_STATUS)(0),                     // 21: receipt.RECEIPT_STATUS
	(EXCEPTION)(0),                          // 22: receipt.EXCEPTION
	(*StorageDatas)(nil),                    // 23: account_state.StorageDatas
}
var file_smart_contract_proto_depIdxs = []int32{
	10, // 0: smart_contract.SmartContractUpdateData.Storage:type_name -> smart_contract.SmartContractUpdateData.StorageEntry
	20, // 1: smart_contract.SmartContractUpdateData.EventLogs:type_name -> event_log.EventLog
	11, // 2: smart_contract.SmartContractUpdateDatas.Data:type_name -> smart_contract.SmartContractUpdateDatas.DataEntry
	12, // 3: smart_contract.ExecuteSCResult.MapAddBalance:type_name -> smart_contract.ExecuteSCResult.MapAddBalanceEntry
	13, // 4: smart_contract.ExecuteSCResult.MapSubBalance:type_name -> smart_contract.ExecuteSCResult.MapSubBalanceEntry
	14, // 5: smart_contract.ExecuteSCResult.MapCodeHash:type_name -> smart_contract.ExecuteSCResult.MapCodeHashEntry
	15, // 6: smart_contract.ExecuteSCResult.MapStorageRoot:type_name -> smart_contract.ExecuteSCResult.MapStorageRootEntry
	21, // 7: smart_contract.ExecuteSCResult.Status:type_name -> receipt.RECEIPT_STATUS
	22, // 8: smart_contract.ExecuteSCResult.Exception:type_name -> receipt.EXCEPTION
	16, // 9: smart_contract.ExecuteSCResult.MapStorageAddressTouchedAddresses:type_name -> smart_contract.ExecuteSCResult.MapStorageAddressTouchedAddressesEntry
	17, // 10: smart_contract.ExecuteSCResult.MapStorageAddress:type_name -> smart_contract.ExecuteSCResult.MapStorageAddressEntry
	18, // 11: smart_contract.ExecuteSCResult.MapCreatorPubkey:type_name -> smart_contract.ExecuteSCResult.MapCreatorPubkeyEntry
	19, // 12: smart_contract.ExecuteSCResult.MapNativeSmartContractUpdateStorage:type_name -> smart_contract.ExecuteSCResult.MapNativeSmartContractUpdateStorageEntry
	20, // 13: smart_contract.ExecuteSCResult.EventLogs:type_name -> event_log.EventLog
	7,  // 14: smart_contract.ExecuteSCResults.Results:type_name -> smart_contract.ExecuteSCResult
	0,  // 15: smart_contract.SmartContractUpdateDatas.DataEntry.value:type_name -> smart_contract.SmartContractUpdateData
	6,  // 16: smart_contract.ExecuteSCResult.MapStorageAddressTouchedAddressesEntry.value:type_name -> smart_contract.TouchedAddresses
	23, // 17: smart_contract.ExecuteSCResult.MapNativeSmartContractUpdateStorageEntry.value:type_name -> account_state.StorageDatas
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_smart_contract_proto_init() }
func file_smart_contract_proto_init() {
	if File_smart_contract_proto != nil {
		return
	}
	file_receipt_proto_init()
	file_event_log_proto_init()
	file_state_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_smart_contract_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartContractUpdateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smart_contract_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartContractUpdateDatas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smart_contract_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSmartContractStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smart_contract_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSmartContractStorageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smart_contract_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSmartContractCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smart_contract_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSmartContractCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smart_contract_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TouchedAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smart_contract_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteSCResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smart_contract_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteSCResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smart_contract_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TouchedAddressesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_smart_contract_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_smart_contract_proto_goTypes,
		DependencyIndexes: file_smart_contract_proto_depIdxs,
		MessageInfos:      file_smart_contract_proto_msgTypes,
	}.Build()
	File_smart_contract_proto = out.File
	file_smart_contract_proto_rawDesc = nil
	file_smart_contract_proto_goTypes = nil
	file_smart_contract_proto_depIdxs = nil
}
