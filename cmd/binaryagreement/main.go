package main

import (
	"crypto/sha256"
	"fmt"
	"math/rand"
	"sync"
	"time"

	"github.com/meta-node-blockchain/meta-node/pkg/binaryagreement"
)

//================================================================================
// Ph·∫ßn Mock - Gi·∫£ l·∫≠p c√°c th√†nh ph·∫ßn b√™n ngo√†i
//================================================================================

// MockThreshSigLib l√† m·ªôt phi√™n b·∫£n gi·∫£ c·ªßa th∆∞ vi·ªán ch·ªØ k√Ω ng∆∞·ª°ng.
type MockThreshSigLib struct{}

func (m *MockThreshSigLib) Sign(data []byte) []byte {
	return []byte(fmt.Sprintf("share-for-%s-%d", string(data), rand.Int()))
}

func (m *MockThreshSigLib) Combine(data []byte, shares map[int][]byte) ([]byte, error) {
	var combined []byte
	// S·∫Øp x·∫øp c√°c share ƒë·ªÉ ƒë·∫£m b·∫£o k·∫øt qu·∫£ t·∫•t ƒë·ªãnh (m·∫∑c d√π trong th·ª±c t·∫ø kh√¥ng c·∫ßn)
	for i := 0; i < len(shares); i++ {
		if share, ok := shares[i]; ok {
			combined = append(combined, share...)
		}
	}
	hash := sha256.Sum256(combined)
	return hash[:], nil
}

// RealisticMockNetwork m√¥ ph·ªèng m·ªôt m·∫°ng l∆∞·ªõi th·ª±c t·∫ø h∆°n v·ªõi ƒë·ªô tr·ªÖ v√† m·∫•t g√≥i.
type RealisticMockNetwork struct {
	numNodes   int
	nodeChans  []chan binaryagreement.Message
	wg         sync.WaitGroup
	shutdown   chan struct{}
	latencyMin time.Duration
	latencyMax time.Duration
	lossRate   float64 // T·ª∑ l·ªá m·∫•t g√≥i (0.0 ƒë·∫øn 1.0)
}

// NewRealisticMockNetwork t·∫°o m·ªôt m·∫°ng m·ªõi.
func NewRealisticMockNetwork(numNodes int, latencyMin, latencyMax time.Duration, lossRate float64) *RealisticMockNetwork {
	chans := make([]chan binaryagreement.Message, numNodes)
	for i := 0; i < numNodes; i++ {
		chans[i] = make(chan binaryagreement.Message, numNodes*10) // Buffer l·ªõn
	}
	return &RealisticMockNetwork{
		numNodes:   numNodes,
		nodeChans:  chans,
		shutdown:   make(chan struct{}),
		latencyMin: latencyMin,
		latencyMax: latencyMax,
		lossRate:   lossRate,
	}
}

// Broadcast g·ª≠i m·ªôt th√¥ng ƒëi·ªáp ƒë·∫øn t·∫•t c·∫£ c√°c n√∫t kh√°c v·ªõi ƒë·ªô tr·ªÖ v√† kh·∫£ nƒÉng m·∫•t g√≥i.
func (n *RealisticMockNetwork) Broadcast(senderID int, msg binaryagreement.Message) {
	for i := 0; i < n.numNodes; i++ {
		if i == senderID {
			continue // N√∫t s·∫Ω t·ª± x·ª≠ l√Ω th√¥ng ƒëi·ªáp c·ªßa m√¨nh, kh√¥ng g·ª≠i qua m·∫°ng
		}

		// M√¥ ph·ªèng m·∫•t g√≥i
		if rand.Float64() < n.lossRate {
			fmt.Printf("üî• [Network] Message from %d to %d lost!\n", senderID, i)
			continue
		}

		// M√¥ ph·ªèng ƒë·ªô tr·ªÖ m·∫°ng
		latency := n.latencyMin + time.Duration(rand.Int63n(int64(n.latencyMax-n.latencyMin)))

		// G·ª≠i tin nh·∫Øn sau m·ªôt kho·∫£ng th·ªùi gian tr·ªÖ
		go func(targetNode int, m binaryagreement.Message, delay time.Duration) {
			time.Sleep(delay)
			select {
			case n.nodeChans[targetNode] <- m:
			case <-n.shutdown:
			}
		}(i, msg, latency)
	}
}

// GetMessagesChannel tr·∫£ v·ªÅ k√™nh nh·∫≠n th√¥ng ƒëi·ªáp cho m·ªôt n√∫t.
func (n *RealisticMockNetwork) GetMessagesChannel(nodeID int) <-chan binaryagreement.Message {
	return n.nodeChans[nodeID]
}

// Stop d·ª´ng m·∫°ng l∆∞·ªõi v√† ch·ªù t·∫•t c·∫£ c√°c goroutine c·ªßa n√∫t k·∫øt th√∫c.
func (n *RealisticMockNetwork) Stop() {
	close(n.shutdown)
	n.wg.Wait()
}

// ================================================================================
// Logic ch·∫°y cho m·ªói lo·∫°i n√∫t
// ================================================================================
// runHonestNodeLogic l√† h√†m ch√≠nh cho m·ªôt n√∫t trung th·ª±c.
func runHonestNodeLogic(
	nodeID int,
	initialValue bool,
	aba binaryagreement.BinaryAgreement,
	network *RealisticMockNetwork,
) {
	defer network.wg.Done()
	fmt.Printf("üí° [Node %d] Starting with proposal: %v\n", nodeID, initialValue)

	// 1. B·∫Øt ƒë·∫ßu b·∫±ng c√°ch ƒë·ªÅ xu·∫•t gi√° tr·ªã ban ƒë·∫ßu.
	step, err := aba.HandleInput(initialValue)
	if err != nil {
		fmt.Printf("‚ùå [Node %d] Error on input: %v\n", nodeID, err)
		return
	}

	// 2. S·ª¨A L·ªñI: T·ª± x·ª≠ l√Ω c√°c th√¥ng ƒëi·ªáp kh·ªüi t·∫°o tr∆∞·ªõc, sau ƒë√≥ m·ªõi broadcast.
	// ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o tr·∫°ng th√°i c·ªßa n√∫t ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr∆∞·ªõc khi g·ª≠i ƒëi.
	var messagesToBroadcast []binaryagreement.Message
	if step.ToBroadcast {
		messagesToBroadcast = append(messagesToBroadcast, step.Messages...)
		for _, msg := range messagesToBroadcast {
			if _, err := aba.HandleMessage(msg); err != nil {
				fmt.Printf("‚ùå [Node %d] Error self-handling initial message: %v\n", nodeID, err)
			}
		}
	}
	// B√¢y gi·ªù m·ªõi g·ª≠i ra m·∫°ng
	for _, msg := range messagesToBroadcast {
		network.Broadcast(nodeID, msg)
	}

	// 3. V√≤ng l·∫∑p ch√≠nh: l·∫Øng nghe v√† x·ª≠ l√Ω th√¥ng ƒëi·ªáp t·ª´ m·∫°ng.
	msgChan := network.GetMessagesChannel(nodeID)
	for {
		// Ki·ªÉm tra k·∫øt th√∫c ·ªü ƒë·∫ßu v√≤ng l·∫∑p
		if aba.HasTerminated() {
			val, _ := aba.Deliver()
			fmt.Printf("‚úÖ [Node %d] Terminated! Final Decision: %v\n", nodeID, val)
			return
		}

		select {
		case msg := <-msgChan:
			step, err := aba.HandleMessage(msg)
			if err != nil {
				fmt.Printf("‚ö†Ô∏è [Node %d] Error handling message: %v\n", nodeID, err)
				continue
			}

			if step.ToBroadcast {
				// T∆∞∆°ng t·ª± nh∆∞ tr√™n: t·ª± x·ª≠ l√Ω tr∆∞·ªõc r·ªìi m·ªõi broadcast
				var newMessagesToBroadcast []binaryagreement.Message
				newMessagesToBroadcast = append(newMessagesToBroadcast, step.Messages...)

				for _, newMsg := range newMessagesToBroadcast {
					if _, err := aba.HandleMessage(newMsg); err != nil {
						fmt.Printf("‚ùå [Node %d] Error self-handling message: %v\n", nodeID, err)
					}
				}
				// B√¢y gi·ªù m·ªõi g·ª≠i
				for _, newMsg := range newMessagesToBroadcast {
					network.Broadcast(nodeID, newMsg)
				}
			}

		case <-network.shutdown:
			fmt.Printf("üõë [Node %d] Shutdown signal received.\n", nodeID)
			return
		case <-time.After(4 * time.Second): // TƒÉng timeout l√™n m·ªôt ch√∫t
			if !aba.HasTerminated() {
				fmt.Printf("‚è≥ [Node %d] Timed out. Has not terminated.\n", nodeID)
			}
			return
		}
	}
}

// runByzantineNodeLogic m√¥ ph·ªèng m·ªôt n√∫t ƒë·ªôc h·∫°i g·ª≠i th√¥ng tin m√¢u thu·∫´n.
func runByzantineNodeLogic(
	nodeID int,
	network *RealisticMockNetwork,
) {
	defer network.wg.Done()
	fmt.Printf("üòà [Node %d] Starting as a BYZANTINE node!\n", nodeID)

	// N√∫t Byzantine s·∫Ω g·ª≠i BVAL(true) cho n·ª≠a ƒë·∫ßu v√† BVAL(false) cho n·ª≠a sau.
	msgTrue := binaryagreement.BValMessage{
		BaseMessage: binaryagreement.BaseMessage{Sender: nodeID, Round: 0},
		Value:       true,
	}
	msgFalse := binaryagreement.BValMessage{
		BaseMessage: binaryagreement.BaseMessage{Sender: nodeID, Round: 0},
		Value:       false,
	}

	for i := 0; i < network.numNodes; i++ {
		if i == nodeID {
			continue
		}
		if i < network.numNodes/2 {
			go network.Broadcast(nodeID, msgTrue) // G·ª≠i broadcast nh∆∞ng ch·ªâ c√≥ m·ªôt s·ªë n√∫t nh·∫≠n ƒë∆∞·ª£c
		} else {
			go network.Broadcast(nodeID, msgFalse)
		}
	}
	fmt.Printf("üòà [Node %d] Sent conflicting BVAL messages.\n", nodeID)

	// N√∫t Byzantine kh√¥ng l√†m g√¨ th√™m, ch·ªâ ch·ªù b·ªã t·∫Øt.
	<-network.shutdown
	fmt.Printf("üõë [Node %d] Byzantine node shutting down.\n", nodeID)
}

//================================================================================
// H√†m ch·∫°y m√¥ ph·ªèng v√† h√†m Main
//================================================================================

func runSimulation(
	numNodes, f int,
	byzantineNodes map[int]struct{},
	initialProposals map[int]bool,
) {
	// --- C·∫•u h√¨nh m√¥ ph·ªèng ---
	netInfo := &binaryagreement.NetworkInfo{N: numNodes, F: f}
	sigLib := &MockThreshSigLib{}
	// M·∫°ng v·ªõi ƒë·ªô tr·ªÖ t·ª´ 5ms ƒë·∫øn 20ms v√† 5% m·∫•t g√≥i
	network := NewRealisticMockNetwork(numNodes, 5*time.Millisecond, 20*time.Millisecond, 0.00) // <--- THAY ƒê·ªîI ·ªû ƒê√ÇY

	// --- Kh·ªüi t·∫°o c√°c n√∫t ---
	nodes := make([]binaryagreement.BinaryAgreement, numNodes)
	for i := 0; i < numNodes; i++ {
		// Kh√¥ng c·∫ßn kh·ªüi t·∫°o ABA cho n√∫t Byzantine v√¨ n√≥ s·∫Ω kh√¥ng tu√¢n theo giao th·ª©c
		if _, isByzantine := byzantineNodes[i]; !isByzantine {
			pid := fmt.Sprintf("aba-instance-%d", i)
			nodes[i] = binaryagreement.NewMoustefaouiABA(pid, i, netInfo, sigLib)
		}
	}

	// --- B·∫Øt ƒë·∫ßu ch·∫°y c√°c n√∫t trong c√°c goroutine ri√™ng bi·ªát ---
	network.wg.Add(numNodes)
	for i := 0; i < numNodes; i++ {
		if _, isByzantine := byzantineNodes[i]; isByzantine {
			go runByzantineNodeLogic(i, network)
		} else {
			go runHonestNodeLogic(i, initialProposals[i], nodes[i], network)
		}
	}

	// Cho m√¥ ph·ªèng ch·∫°y trong m·ªôt kho·∫£ng th·ªùi gian.
	time.Sleep(1 * time.Second)
	network.Stop()

	// --- Ph√¢n t√≠ch k·∫øt qu·∫£ ---
	fmt.Println("\n--- Final Results ---")
	var finalDecision *bool
	allHonestTerminated := true
	allAgree := true
	correctNodeCount := 0

	for i := 0; i < numNodes; i++ {
		if _, isByzantine := byzantineNodes[i]; isByzantine {
			continue // B·ªè qua n√∫t byzantine khi ki·ªÉm tra k·∫øt qu·∫£
		}
		correctNodeCount++
		if nodes[i].HasTerminated() {
			val, _ := nodes[i].Deliver()
			if finalDecision == nil {
				finalDecision = &val
			} else if *finalDecision != val {
				allAgree = false
			}
		} else {
			allHonestTerminated = false
		}
	}

	fmt.Println("\n--- Summary ---")
	if !allHonestTerminated {
		fmt.Println("‚ùå FAILURE: Not all honest nodes terminated.")
	} else if !allAgree {
		fmt.Println("‚ùå FAILURE: Honest nodes did not agree on a common value!")
	} else if finalDecision != nil {
		fmt.Printf("‚úÖ SUCCESS: All %d honest nodes terminated and agreed on the value: %v\n", correctNodeCount, *finalDecision)
	} else {
		fmt.Println("ü§î RESULT: All honest nodes terminated, but no decision was made (might happen if all timed out).")
	}
}

func main() {
	// Kh·ªüi t·∫°o seed cho b·ªô sinh s·ªë ng·∫´u nhi√™n
	rand.Seed(time.Now().UnixNano())

	const NUM_NODES = 4
	const F = 1 // S·ªë n√∫t l·ªói t·ªëi ƒëa c√≥ th·ªÉ ch·ªãu ƒë∆∞·ª£c

	//==============================================================
	// K·ªãch b·∫£n 1: T·∫•t c·∫£ c√°c n√∫t trung th·ª±c ƒë·ªÅ xu·∫•t TRUE
	//==============================================================
	fmt.Println("=================================================")
	fmt.Println("üöÄ SCENARIO 1: ALL HONEST NODES PROPOSE 'TRUE'")
	fmt.Println("=================================================")
	runSimulation(
		NUM_NODES, F,
		map[int]struct{}{}, // Kh√¥ng c√≥ n√∫t Byzantine
		map[int]bool{0: true, 1: true, 2: true, 3: true},
	)
	time.Sleep(2 * time.Second) // Ngh·ªâ gi·ªØa c√°c k·ªãch b·∫£n

	//==============================================================
	// K·ªãch b·∫£n 2: C√°c n√∫t trung th·ª±c b·ªã chia r·∫Ω
	//==============================================================
	fmt.Println("\n\n=================================================")
	fmt.Println("üöÄ SCENARIO 2: HONEST NODES HAVE SPLIT VOTES")
	fmt.Println("=================================================")
	runSimulation(
		NUM_NODES, F,
		map[int]struct{}{}, // Kh√¥ng c√≥ n√∫t Byzantine
		map[int]bool{0: true, 1: true, 2: false, 3: false},
	)
	time.Sleep(2 * time.Second)

	//==============================================================
	// K·ªãch b·∫£n 3: C√≥ 1 n√∫t Byzantine (f=1)
	//==============================================================
	fmt.Println("\n\n=================================================")
	fmt.Printf("üöÄ SCENARIO 3: %d HONEST NODES + 1 BYZANTINE NODE\n", NUM_NODES-1)
	fmt.Println("=================================================")
	runSimulation(
		NUM_NODES, F,
		map[int]struct{}{3: {}},                  // N√∫t 3 l√† Byzantine
		map[int]bool{0: true, 1: false, 2: true}, // ƒê·ªÅ xu·∫•t c·ªßa c√°c n√∫t trung th·ª±c
	)
}
