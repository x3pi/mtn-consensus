package main

import (
	"context"
	"encoding/gob"
	"fmt"
	"log"
	"math/rand"
	"sync"
	"time"
)

func main() {
	rand.Seed(time.Now().UnixNano())
	// ƒêƒÉng k√Ω ki·ªÉu Transaction ƒë·ªÉ c√≥ th·ªÉ m√£ h√≥a/gi·∫£i m√£ qua m·∫°ng.
	gob.Register(&Transaction{})

	// C·∫•u h√¨nh m√¥ ph·ªèng
	const (
		numNodes       = 4
		initialTxCount = 1000 // Giao d·ªãch ban ƒë·∫ßu cho m·ªói node
		batchSize      = 100  // K√≠ch th∆∞·ªõc batch c·ªßa HBBFT
		simulationTime = 2 * time.Minute
		networkLatency = 100 * time.Millisecond
		statsInterval  = 15 * time.Second
	)

	// 1. Kh·ªüi t·∫°o Network Router
	router := NewNetworkRouter(networkLatency)

	// 2. T·∫°o Node IDs
	nodeIDs := make([]uint64, numNodes)
	for i := 0; i < numNodes; i++ {
		nodeIDs[i] = uint64(i)
	}

	// 3. Kh·ªüi t·∫°o c√°c Server (Node)
	servers := make([]*Server, numNodes)
	for i := 0; i < numNodes; i++ {
		server := newServer(uint64(i), nodeIDs, router, batchSize)
		servers[i] = server
		router.RegisterNode(uint64(i), server)

		// Th√™m c√°c giao d·ªãch ban ƒë·∫ßu v√†o mempool c·ªßa m·ªói node
		initialTxs := make([]*Transaction, initialTxCount)
		for j := range initialTxs {
			initialTxs[j] = newTransaction()
		}
		server.addTransactions(initialTxs...)
	}

	// 4. Kh·ªüi ƒë·ªông c√°c node
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	var wg sync.WaitGroup
	wg.Add(numNodes)

	for _, s := range servers {
		go s.start(ctx, &wg)
	}
	log.Println("üöÄ T·∫•t c·∫£ c√°c node ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông. B·∫Øt ƒë·∫ßu m√¥ ph·ªèng...")

	// 5. V√≤ng l·∫∑p ch√≠nh ƒë·ªÉ theo d√µi v√† in th·ªëng k√™ t·ªïng h·ª£p
	mainTicker := time.NewTicker(statsInterval)
	defer mainTicker.Stop()
	timeout := time.NewTimer(simulationTime)
	defer timeout.Stop()

	startTime := time.Now()

	for {
		select {
		case <-timeout.C:
			log.Println("‚è≥ M√¥ ph·ªèng k·∫øt th√∫c. ƒêang ch·ªù c√°c node t·∫Øt...")
			cancel()  // G·ª≠i t√≠n hi·ªáu d·ª´ng ƒë·∫øn t·∫•t c·∫£ c√°c goroutine
			wg.Wait() // Ch·ªù t·∫•t c·∫£ c√°c node k·∫øt th√∫c
			log.Println("‚úÖ T·∫•t c·∫£ c√°c node ƒë√£ t·∫Øt.")
			printFinalStats(servers, time.Since(startTime))
			return

		case <-mainTicker.C:
			printAggregatedStats(servers, time.Since(startTime))
		}
	}
}

// printAggregatedStats in th·ªëng k√™ t·ªïng h·ª£p t·ª´ t·∫•t c·∫£ c√°c node.
func printAggregatedStats(nodes []*Server, runningTime time.Duration) {
	var totalCommits, totalSent, totalReceived, totalMempool int
	for _, node := range nodes {
		commits, sent, received, mempool := node.getStats()
		// V√¨ c√°c block ƒë∆∞·ª£c commit tr√™n t·∫•t c·∫£ c√°c node, ch·ªâ c·∫ßn l·∫•y t·ª´ m·ªôt node l√† ƒë·ªß.
		if totalCommits == 0 {
			totalCommits = commits
		}
		totalSent += sent
		totalReceived += received
		totalMempool += mempool
	}

	fmt.Println("\n--- TH·ªêNG K√ä T·ªîNG QU√ÅT ---")
	fmt.Printf("Th·ªùi gian ch·∫°y: %s\n", runningTime.Truncate(time.Second))
	fmt.Printf("T·ªïng s·ªë Giao d·ªãch ƒë√£ Commit (∆∞·ªõc t√≠nh): %d\n", totalCommits)
	fmt.Printf("T·ªïng s·ªë Tin nh·∫Øn (G·ª≠i/Nh·∫≠n): %d / %d\n", totalSent, totalReceived)
	fmt.Printf("T·ªïng s·ªë Giao d·ªãch trong Mempools: %d\n", totalMempool)
	fmt.Println("--------------------------\n")
}

// printFinalStats in th·ªëng k√™ cu·ªëi c√πng khi m√¥ ph·ªèng k·∫øt th√∫c.
func printFinalStats(nodes []*Server, runningTime time.Duration) {
	fmt.Println("\n\n--- K·∫æT QU·∫¢ M√î PH·ªéNG CU·ªêI C√ôNG ---")
	printAggregatedStats(nodes, runningTime)

	var totalCommits int
	if len(nodes) > 0 {
		totalCommits, _, _, _ = nodes[0].getStats()
	}

	if runningTime.Seconds() > 0 {
		tps := float64(totalCommits) / runningTime.Seconds()
		fmt.Printf("Th√¥ng l∆∞·ª£ng (TPS - Giao d·ªãch m·ªói gi√¢y): %.2f\n", tps)
	}
	fmt.Println("------------------------------------")
}
